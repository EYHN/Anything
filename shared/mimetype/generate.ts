import mimetypeSchema from './mimetype.json';
import fs from 'fs';
import path from 'path';

const noModifyAlert = `/* This file is automatically generated by @anything/shared, please do not modify this file. */`;

function generateCSharp() {
  const namespace = `Anything.Preview.MimeType.Schema`;

  function escapeMimeType(mime: string) {
    return mime.replace(/[./+-]/g, '_');
  }

  return `${noModifyAlert}
#pragma warning disable
namespace ${namespace}
{
  public sealed partial record MimeType
  {
${mimetypeSchema.map((item) => `    public static MimeType ${escapeMimeType(item.mime)} => new(@"${item.mime}");`).join('\n\n')}
  }
}`;
}

function generateTypescript() {
  return `${noModifyAlert}
/* eslint-disable */
export const MimetypeSchema = ${JSON.stringify(mimetypeSchema, undefined, 2)} as const;
`;
}

if (!fs.existsSync(path.join(__dirname, './generated'))) {
  fs.mkdirSync(path.join(__dirname, './generated'));
}

fs.writeFileSync(path.join(__dirname, './generated/schema.cs'), generateCSharp());
fs.writeFileSync(path.join(__dirname, './generated/schema.ts'), generateTypescript());
